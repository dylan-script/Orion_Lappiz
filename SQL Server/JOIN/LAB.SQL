SELECT SalesLT.Product.Name As ProductName, SalesLT.ProductCategory.Name AS CategoryFROM SalesLT.ProductINNER JOIN SalesLT.ProductCategoryON SalesLT.Product.ProductCategoryID = SalesLT.ProductCategory.ProductCategoryID;--SELECT SalesLT.Product.Name As ProductName, SalesLT.ProductCategory.Name AS CategoryFROM SalesLT.ProductJOIN SalesLT.ProductCategory    ON SalesLT.Product.ProductCategoryID = SalesLT.ProductCategory.ProductCategoryID;--SELECT p.Name As ProductName, c.Name AS CategoryFROM SalesLT.Product AS pJOIN SalesLT.ProductCategory As c    ON p.ProductCategoryID = c.ProductCategoryID;--retrieves sales order data from the SalesLT.SalesOrderHeader, SalesLT.SalesOrderDetail, and SalesLT.Product tables:SELECT oh.OrderDate, oh.SalesOrderNumber, p.Name As ProductName, od.OrderQty, od.UnitPrice, od.LineTotalFROM SalesLT.SalesOrderHeader AS ohJOIN SalesLT.SalesOrderDetail AS od    ON od.SalesOrderID = oh.SalesOrderIDJOIN SalesLT.Product AS p    ON od.ProductID = p.ProductIDORDER BY oh.OrderDate, oh.SalesOrderID, od.SalesOrderDetailID;--Note the use of the LEFT keyword. This identifies which of the tables in the join is the outer table (the one from which all rows should be preserved). In this case, the join is between the Customer and SalesOrderHeader tables, so a LEFT join designates Customer as the outer table. Had a RIGHT join been used, the query would have returned all records from the SalesOrderHeader table and only matching data from the Customer**table (in other words, all orders including those for which there was no matching customer record). You can also use a *FULL outer join to preserve unmatched rows from *both sides of the join (all customers, including those who haven't placed an order; and all orders, including those with no matching customer), though in practice this is used less frequently.SELECT c.FirstName, c.LastName, oh.SalesOrderNumberFROM SalesLT.Customer AS cLEFT OUTER JOIN SalesLT.SalesOrderHeader AS oh    ON c.CustomerID = oh.CustomerIDORDER BY c.CustomerID;--SELECT c.FirstName, c.LastName, oh.SalesOrderNumberFROM SalesLT.Customer AS cLEFT JOIN SalesLT.SalesOrderHeader AS oh    ON c.CustomerID = oh.CustomerIDORDER BY c.CustomerID;--SELECT c.FirstName, c.LastName, oh.SalesOrderNumberFROM SalesLT.Customer AS cLEFT JOIN SalesLT.SalesOrderHeader AS oh    ON c.CustomerID = oh.CustomerIDWHERE oh.SalesOrderNumber IS NULL ORDER BY c.CustomerID;--Run the query and note that the results include all products, with order numbers for any that have been purchased. This required a sequence of joins from Product to SalesOrderDetail to SalesOrderHeader. Note that when you join multiple tables like this, after an outer join has been specified in the join sequence, all subsequent outer joins must be of the same direction (LEFT or RIGHT).SELECT p.Name As ProductName, oh.SalesOrderNumberFROM SalesLT.Product AS pLEFT JOIN SalesLT.SalesOrderDetail AS od    ON p.ProductID = od.ProductIDLEFT JOIN SalesLT.SalesOrderHeader AS oh    ON od.SalesOrderID = oh.SalesOrderIDORDER BY p.ProductID;--Modify the query as shown below to add an inner join to return category information. When mixing inner and outer joins, it can be helpful to be explicit about the join types by using the INNER and OUTER keywords.SELECT p.Name As ProductName, c.Name AS Category, oh.SalesOrderNumberFROM SalesLT.Product AS pLEFT OUTER JOIN SalesLT.SalesOrderDetail AS od    ON p.ProductID = od.ProductIDLEFT OUTER JOIN SalesLT.SalesOrderHeader AS oh    ON od.SalesOrderID = oh.SalesOrderIDINNER JOIN SalesLT.ProductCategory AS c    ON p.ProductCategoryID = c.ProductCategoryIDORDER BY p.ProductID;--Use a self join/*A self join isn't actually a specific kind of join, but it's a technique used to join a table to itself by defining two instances of the table, each with its own alias. This approach can be useful when a row in the table includes a foreign key field that references the primary key of the same table; for example in a table of employees where an employee's manager is also an employee, or a table of product categories where each category might be a subcategory of another category.Replace the existing query with the following code, which includes a self join between two instances of the SalesLT.ProductCategory table (with aliases cat and pcat):*/SELECT pcat.Name AS ParentCategory, cat.Name AS SubCategoryFROM SalesLT.ProductCategory as catJOIN SalesLT.ProductCategory pcat    ON cat.ParentProductCategoryID = pcat.ProductCategoryIDORDER BY ParentCategory, SubCategory;